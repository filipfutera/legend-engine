{
  "ErrorCategories": [
    {
      "CategoryName": "UserAuthenticationError",
      "Types": [

        {
          "TypeName": "CredentialsError",
          "Exceptions": [
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "username|password"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "username|password|GSSAPI credentials|kerberos.*is not valid"
            },
            {
              "ExceptionName": "UnsupportedOperationException",
              "MessageRegex": "Kerberos|credential"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "SecureConnect credentials|does not contain one of the expected credential types|bad credentials"
            },
            {
              "ExceptionName": "LoginException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "GSSException",
              "MessageRegex": "No valid credentials provided"
            },
            {
              "ExceptionName": "SQLException",
              "MessageRegex": "Expired SecureConnect token|GSSException is caught when getting a ticket from JGSS|Invalid user ID or password"
            },
            {
              "ExceptionName": "SQLInvalidAuthorizationSpecException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "PoolInitializationException",
              "MessageRegex": ""
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "PermissionsError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "not part of  Write service"
            },
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "no default role has been assigned to the user"
            },
            {
              "ExceptionName": "SQLException",
              "MessageRegex": "permission denied"
            }
          ],
          "TypeExceptionRegex": ""
        }
      ],
      "Keywords": ["login", "kerberos", "credential", "username", "password", "authenticat", "permission"]
    },


    {
      "CategoryName": "UserExecutionError",
      "Types": [

        {
          "TypeName": "QueryError",
          "Exceptions": [
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "session does not have a current database|Can't find a match for function|Can't find type"
            },
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "session does not have a current database"
            },
            {
              "ExceptionName": "AvaticaSqlException",
              "MessageRegex": "not entitled to data store"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "DatabaseNotFoundError",
          "Exceptions": [
            {
              "ExceptionName": "SQLSyntaxErrorException",
              "MessageRegex": "unknown database"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "ServiceUpdateError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "new data for the service doesn't have the right pattern"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "service must have more than one owner"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    },
    {

      "CategoryName": "InternalServerError",
      "Types": [

        {
          "TypeName": "MissingItemError",
          "Exceptions": [
            {
              "ExceptionName": "WebApplicationException",
              "MessageRegex": "no registration found"
            },
            {
              "ExceptionName": "RefreshFailedException",
              "MessageRegex": "unexpected"
            },
            {
              "ExceptionName": "ReflectionsException",
              "MessageRegex": "could not get type for name"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "ConfigurationError",
          "Exceptions": [
            {
              "ExceptionName": "ClassNotFoundException",
              "MessageRegex": "untrusted class"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "GSExceptionSlang"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    },

    {
      "CategoryName": "ServerExecutionError",
      "Types": [

        {
          "TypeName": "DatabaseError",
          "Exceptions": [
            {
              "ExceptionName": "JdbcSQLIntegrityConstraintViolationException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "JdbcSQLSyntaxErrorException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "SQLSyntaxErrorException",
              "MessageRegex": "Unknown column"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Redshift"
            },
            {
              "ExceptionName": "MongoCommandException",
              "MessageRegex": "changed during processing"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "reading GridFS|writing to the Stream"
            },
            {
              "ExceptionName": "JdbcSQLDataException",
              "MessageRegex": "Value too long for column"
            },
            {
              "ExceptionName": "AvaticaSqlException",
              "MessageRegex": "remote driver error"
            }
          ],
          "TypeExceptionRegex": "SQL.*Exception"
        },

        {
          "TypeName": "PureError",
          "Exceptions": [
            {
              "ExceptionName": "PureExecutionException",
              "MessageRegex": ""
            }
          ],
          "TypeExceptionRegex": "Pure.*Exception"
        },

        {
          "TypeName": "JSONError",
          "Exceptions": [
            {
              "ExceptionName": "JsonParseException",
              "MessageRegex": "Unexpected character"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Unexpected token"
            }
          ],
          "TypeExceptionRegex": "JSON.*Exception"
        },

        {
          "TypeName": "GraphError",
          "Exceptions": [
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Can't find property|Can't find store|Can't find table"
            }
          ],
          "TypeExceptionRegex": "Graph.*Exception"
        },

        {
          "TypeName": "JavaErrors",
          "Exceptions": [
            {
              "ExceptionName": "JavaCompileException",
              "MessageRegex": "incompatible type"
            },
            {
              "ExceptionName": "ClassCastException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "NonStringOrTemplateOutputException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Issue processing freemarker function|MiscTemplateException"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
        "TypeName": "ServiceError",
        "Exceptions": [
          {
            "ExceptionName": "IllegalArgumentException",
            "MessageRegex": "Error loading service|Invalid provided parameter|Reprocessing sql failed with vars"
          }
        ],
        "TypeExceptionRegex": ""
        },

        {
          "TypeName": "SlangError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "slang exception"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "CommunicationErrors",
          "Exceptions": [
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Failed to initialize pool"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": ["initialize.*pool"]
    },


    {
      "CategoryName": "OtherError",
      "Types": [

        {
          "TypeName": "ConnectionError",
          "Exceptions": [
            {
              "ExceptionName": "ConnectionException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "SQLTransientConnectionException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "SocketTimeoutException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "MappableException",
              "MessageRegex": ""
            }
          ],
          "TypeExceptionRegex": "Connection|Timeout"
        },

        {
          "TypeName": "TestingError",
          "Exceptions": [
            {
              "ExceptionName": "IllegalArgumentException",
              "MessageRegex": "Error running tests"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Checked exception caught in Procedure"
            },
            {
              "ExceptionName": "PureAssertFailException",
              "MessageRegex": "exception occurred executing service test suites"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    }
  ]
}