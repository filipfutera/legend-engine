{
  "ErrorCategories": [
    {
      "CategoryName": "UserAuthenticationError",
      "Types": [

        {
          "TypeName": "CredentialsError",
          "Exceptions": [
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "username|password"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "username|password|GSSAPI credentials|kerberos.*is not valid|A 'Secure Connect' or a Kerberos connection can't be build outside of a user call"
            },
            {
              "ExceptionName": "UnsupportedOperationException",
              "MessageRegex": "Kerberos|credential"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "(SecureConnect|bad) credentials|does not contain one of the expected credential types|Identity does not contain one of the expected credential types"
            },
            {
              "ExceptionName": "LoginException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "GSSException",
              "MessageRegex": "No valid credentials provided|defective token detected"
            },
            {
              "ExceptionName": "SQLException",
              "MessageRegex": "Expired SecureConnect token|GSSException is caught when getting a ticket from JGSS|Invalid user ID or password"
            },
            {
              "ExceptionName": "SQLInvalidAuthorizationSpecException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "PoolInitializationException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Failed to initialize pool"
            },
            {
              "ExceptionName": "AuthenticationFailedException",
              "MessageRegex": "401 Unauthorized"
            },
            {
              "ExceptionName": "IOException",
              "MessageRegex": "Server returned HTTP response code: 401 for URL"
            },
            {
              "ExceptionName": "Exception",
              "MessageRegex": "Identity does not contain one of the expected credential types"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "PermissionsError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "not part of Write service|access denied"
            },
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "no default role has been assigned to the user|session does not have a current database|no active warehouse selected in the current session|Role .* specified in the connect string is not granted to this user"
            },
            {
              "ExceptionName": "SQLException",
              "MessageRegex": "permission denied|access denied"
            },
            {
              "ExceptionName": "FailureException",
              "MessageRegex": "access denied"
            }
          ],
          "TypeExceptionRegex": ""
        }
      ],
      "Keywords": ["login", "kerberos", "credential", "username", "password", "authenticat", "permission", "initialize pool"]
    },


    {
      "CategoryName": "UserExecutionError",
      "Types": [

        {
          "TypeName": "QueryError",
          "Exceptions": [
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Can't find a match for function"
            },
            {
              "ExceptionName": "SnowflakeSQLException",
              "MessageRegex": "sql compilation error.*object.*does not exist or not authorized"
            },
            {
              "ExceptionName": "AvaticaSqlException",
              "MessageRegex": "not entitled to data store"
            },
            {
              "ExceptionName": "SQLException",
              "MessageRegex": "Table .* doesn't exist|(Column|Table) .* not found"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "DatabaseNotFoundError",
          "Exceptions": [
            {
              "ExceptionName": "SQLSyntaxErrorException",
              "MessageRegex": "unknown (database|column)"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Can't find database"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "UserRequestError",
          "Exceptions": [
            {
              "ExceptionName": "IllegalArgumentException",
              "MessageRegex": "No service found with uri"
            }
          ],
          "TypeExceptionRegex": ""
        },


        {
          "TypeName": "ServiceUpdateError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "new data for the service doesn't have the right pattern"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "service must have more than one owner|test does not match execution type"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    },
    {

      "CategoryName": "InternalServerError",
      "Types": [

        {
          "TypeName": "MissingItemError",
          "Exceptions": [
            {
              "ExceptionName": "WebApplicationException",
              "MessageRegex": "no registration found"
            },
            {
              "ExceptionName": "RefreshFailedException",
              "MessageRegex": "unexpected"
            },
            {
              "ExceptionName": "ReflectionsException",
              "MessageRegex": "could not get type for name"
            },
            {
              "ExceptionName": "NotFoundException",
              "MessageRegex": "HTTP 404 Not Found"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "ConfigurationError",
          "Exceptions": [
            {
              "ExceptionName": "ClassNotFoundException",
              "MessageRegex": "untrusted class"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "GSExceptionSlang"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "JavaError",
          "Exceptions": [
            {
              "ExceptionName": "InterruptedException",
              "MessageRegex": ""
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    },

    {
      "CategoryName": "ServerExecutionError",
      "Types": [

        {
          "TypeName": "DatabaseError",
          "Exceptions": [
            {
              "ExceptionName": "JdbcSQLIntegrityConstraintViolationException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "JdbcSQLSyntaxErrorException",
              "MessageRegex": "Syntax error in SQL statement|.*"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Redshift"
            },
            {
              "ExceptionName": "MongoCommandException",
              "MessageRegex": "changed during processing"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "reading GridFS|writing to the Stream"
            },
            {
              "ExceptionName": "JdbcSQLDataException",
              "MessageRegex": "Value too long for column"
            },
            {
              "ExceptionName": "AvaticaSqlException",
              "MessageRegex": "remote driver error"
            },
            {
              "ExceptionName": "IllegalArgumentException",
              "MessageRegex": "invalid hexadecimal representation of an ObjectId"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Can't find table .* in schema .* and database .*"
            }
          ],
          "TypeExceptionRegex": "SQL.*Exception"
        },

        {
          "TypeName": "PureError",
          "Exceptions": [
            {
              "ExceptionName": "PureExecutionException",
              "MessageRegex": "Execution error at .* cast exception|cannot cast collection of size 0 to multiplicity"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Engine was unable to load information from the Pure SDLC|Can't find mapping|Assert failure at"
            }
          ],
          "TypeExceptionRegex": "Pure.*Exception"
        },

        {
          "TypeName": "JSONError",
          "Exceptions": [
            {
              "ExceptionName": "JsonParseException",
              "MessageRegex": "Unexpected character"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Unexpected token|no viable alternative at input"
            },
            {
              "ExceptionName": "UnrecognizedPropertyException",
              "MessageRegex": "Unrecognised field.*not marked as ignorable|.*"
            },
            {
              "ExceptionName": "InvalidTypeIdException",
              "MessageRegex": "Could not resolve type id.*as a subtype of|.*"
            },
            {
              "ExceptionName": "InvalidDefinitionException",
              "MessageRegex": "Direct self-reference leading to cycle|.*"
            }
          ],
          "TypeExceptionRegex": "JSON.*Exception"
        },

        {
          "TypeName": "GraphError",
          "Exceptions": [
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Error in.*Can't (find [the ]*(property|store|type|profile|Connection|SchemaSet)|build the message function for constraint .* of class)"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Error in.* (all required service parameters should be mapped|Mapping error: the join .* does not contain the source table)"
            }
          ],
          "TypeExceptionRegex": "Graph.*Exception"
        },

        {
          "TypeName": "JavaErrors",
          "Exceptions": [
            {
              "ExceptionName": "JavaCompileException",
              "MessageRegex": "incompatible type"
            },
            {
              "ExceptionName": "ClassCastException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "NonStringOrTemplateOutputException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "IllegalArgumentException",
              "MessageRegex": "Missing external parameter"
            },
            {
              "ExceptionName": "EngineException",
              "MessageRegex": "Can't find property .* in class"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
        "TypeName": "ServiceRequestError",
        "Exceptions": [
          {
            "ExceptionName": "IllegalArgumentException",
            "MessageRegex": "Error loading service|Invalid provided parameter|Reprocessing sql failed with vars"
          },
          {
            "ExceptionName": "RuntimeException",
            "MessageRegex": "HTTP request.*failed with error|Invalid Input: null|Input stream was not provided"
          },
          {
            "ExceptionName": "EngineException",
            "MessageRegex": "Can't resolve the builder for function|Can't find model for ID|No generation found with id"
          }
        ],
        "TypeExceptionRegex": ""
        },

        {
          "TypeName": "SlangError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "slang exception"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "FreemarkerError",
          "Exceptions": [
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Issue processing freemarker function|MiscTemplateException"
            },
            {
              "ExceptionName": "_MiscTemplateException",
              "MessageRegex": "When calling function.*required parameter.*was specified, but had null/missing value"
            },
            {
              "ExceptionName": "StopException",
              "MessageRegex": "no metadata found"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "RegexError",
          "Exceptions": [
            {
              "ExceptionName": "PatternSyntaxException",
              "MessageRegex": "Illegal repetition"
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": ["mapping error"]
    },


    {
      "CategoryName": "OtherError",
      "Types": [

        {
          "TypeName": "ConnectionError",
          "Exceptions": [
            {
              "ExceptionName": "ConnectionException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "SQLTransientConnectionException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "SocketTimeoutException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "MappableException",
              "MessageRegex": ""
            },
            {
              "ExceptionName": "EOFException",
              "MessageRegex": "unexpected end of stream"
            }
          ],
          "TypeExceptionRegex": "Connection|Timeout"
        },

        {
          "TypeName": "TestingError",
          "Exceptions": [
            {
              "ExceptionName": "IllegalArgumentException",
              "MessageRegex": "Error running tests"
            },
            {
              "ExceptionName": "RuntimeException",
              "MessageRegex": "Checked exception caught in Procedure"
            },
            {
              "ExceptionName": "PureAssertFailException",
              "MessageRegex": "exception occurred executing service test suites|Assert failure at*trees are not supported yet|.*"
            }
          ],
          "TypeExceptionRegex": ""
        },

        {
          "TypeName": "GenericError",
          "Exceptions": [
            {
              "ExceptionName": "NullPointerException",
              "MessageRegex": ""
            }
          ],
          "TypeExceptionRegex": ""
        }

      ],
      "Keywords": []
    }
  ]
}